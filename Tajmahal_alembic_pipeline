import maya.cmds as cmds
import os
import os.path
import maya.mel as mel


# refer button for animator
def refer_button():
        exec(open('D:/gss/Scripts/Taj_mahal/script/refer_buttton.py'))


# input Framerange
startFrm = []
endFrm = []
shot_num = []

char_name =[]
set_name = []
selected_char = []


def input_frm():
    print 'input frames for exporting done'
    global startFrm
    global endFrm
    global shot_num
    startFrm= cmds.textField('strFrmBox', text=True,query = True)
    endFrm= cmds.textField('endFrmBox', text=True,query = True)
    shot_num= cmds.textField('shotFrmBox', text=True,query = True)
    endFrm = " " + endFrm
    return startFrm
    return shot_num
    return endFrm
    print startFrm
    print endFrm
    print shot_num


# adding data information for exporting alembic to server path

class abc_data(object):
    def __init__(self):
        print 'abc data warning'
        
    def shot_name(self):
        print 'halfway'
        global old_path
        global file_path
        file_path = cmds.file(expandName =True, q = True)
        print file_path
        old_path = file_path.replace( 'anim','abc', 1)
        print old_path
        return old_path
        return file_path
        
    def select_char(self):
        print 'host char'
        if cmds.ls(selection = True):
            global selected_char
            selected_char = cmds.ls(selection = True)
            return selected_char
        else:
            print cmds.confirmDialog(title = ' Warning!!! ' , message = ' please select an object and click to export' , cancelButton='Oky GSS' )

    
# alembic export button         
class abcExport(abc_data):
    def __init__(self):
        print 'abc export warning'
        print input_frm()
        self.shot_name()
        self.select_char()
        self.char_export()
        self.epath_check()
    
    def char_export(self):
        for po in selected_char:
            try:
                edit_path = os.path.split(old_path)
                abc_name = po + '.abc'
                new_path = old_path.replace( edit_path[1], abc_name, 1)
                attrZ = " " + "|" + po + " " + "-file" + " "    
                common = "-frameRange " + startFrm + endFrm + " -uvWrite -writeVisibility -dataFormat ogawa -root" + attrZ + new_path
                cmds.AbcExport( j = common)
            except:
                pass

    def epath_check(self):
         edit_path = os.path.split(old_path)
         for eo in selected_char:
             abc_name = eo + '.abc'
             new_path = old_path.replace( edit_path[1], abc_name, 1)
             attrK = eo + " " + 'Error !!! not exported'
             if os.path.isfile(new_path):
                 print cmds.confirmDialog(title = ' Sucessfully Done ' , message = ' Alembic has been Exported sucessfully' , cancelButton='Oky GSS' )
                 break
             else:
                 print cmds.confirmDialog(title = ' Error !!! ' , message = attrK , cancelButton='Oky GSS' )



# Rat Count
RatA = 0
RatB = 0
RatC = 0
RatD = 0

def input_rats():
    print 'input rats numbers '
    global RatA
    global RatB
    global RatC
    global RatD
    RatA= cmds.textField('BoxA', text=True,query = True)
    RatB= cmds.textField('BoxB', text=True,query = True)
    RatC= cmds.textField('BoxC', text=True,query = True)
    RatD= cmds.textField('BoxD', text=True,query = True)
    print RatA
    return RatA
    print RatB
    return RatB
    print RatC
    return RatC
    print RatD
    return RatD


# for import RAt shading file from server path

def import_rats(RatA, RatB, RatC, RatD):
    print "import_rats warning"
    if RatA > 0:
        for d in range(int(RatA)):
            cmds.file("D:/gss/Scripts/Taj_mahal/Assets/rigs/Rat_A_Rig_01/Rat_A_01.ma", namespace = ":", ra = True, mergeNamespacesOnClash = True , options = "v=0;p=17;f=0" ,i = True)
    else:
        print 'no Rat A'
    if RatB > 0:
        for d in range(int(RatB)):
            cmds.file("D:/gss/Scripts/Taj_mahal/Assets/rigs/Rat_B_Rig_01/Rat_B_01.ma", namespace = ":", ra = True, mergeNamespacesOnClash = True , options = "v=0;p=17;f=0" ,i = True)
    else:
        print 'no Rat B'
    if RatC > 0:
        for d in range(int(RatC)):
            cmds.file("D:/gss/Scripts/Taj_mahal/Assets/rigs/Rat_C_Rig_01/Rat_C_01.ma", namespace = ":", ra = True, mergeNamespacesOnClash = True , options = "v=0;p=17;f=0" ,i = True)
    else:
        print 'no Rat C'
    if RatD > 0:
        for d in range(int(RatD)):
            cmds.file("D:/gss/Scripts/Taj_mahal/Assets/rigs/Rat_D_Rig_01/Rat_D_01.ma", namespace = ":", ra = True, mergeNamespacesOnClash = True , options = "v=0;p=17;f=0" ,i = True)
    else:
        print 'no Rat D'

def import_Rats():
    print input_rats()
    print import_rats(RatA, RatB, RatC, RatD)
    print cmds.confirmDialog(title = 'Sucessfully Done ' , message = 'Assets have been imported' , cancelButton='Oky GSS' ) 



# Declaring the existed shot path and Replace path notes
new_pathA= []
new_pathC= []
new_pathD= []

path_files = []

listA= []
file_path = []
new_path = []
old_path = []

abc_file_path = '"D:/gss/Scripts/Taj_mahal/Shots/Shot/Shot999/3D/data/abc/"'
abc_file_pathA = '"D:/gss/Scripts/Taj_mahal/Shots/Shot/Shot999/3D/data/abc/file"'

remove_abc = []
ex_abc_grp = []


class abcImport(abc_data):
    def __init__(self):
        print ' abc import warning'
        print input_frm()
        self.path_abc()
        self.rep_abc()
        self.delete_grps_data()
    
#get path files in list
    def path_abc(self):
        attrM = "Shot" + shot_num
        global new_pathA
        global new_pathC
        global path_files
        new_pathA = abc_file_path.replace( 'Shot999' , attrM, 1)
        print new_pathA
        new_pathC = eval(new_pathA)
        print new_pathC
        path_files = cmds.getFileList( folder = new_pathC )
        print path_files
        global new_pathD
        new_pathD = abc_file_pathA.replace( 'Shot999' , attrM, 1)
        print new_pathD
        return new_pathD
        return new_pathA
        return new_pathC
        
    def rep_abc(self):
        for dk in path_files:
            try:
                new_abc_pathA = new_pathD.replace( "file" , dk)
                abc_data_path = ("AbcImport" + " " + "-mode import -connect" + " " + '"/"' + " " + new_abc_pathA)
                mel.eval(abc_data_path)
            except:
                pass
        print cmds.confirmDialog(title = 'Sucessfully Done ' , message = 'Alembics have been replaced sucessfully' , cancelButton='Oky GSS' ) 
                

    def delete_grps_data(self):
        for i in path_files:
            remove_abc = i.replace('.abc',"")
            listA.append(remove_abc)
            print listA

def delete_grps():
    if cmds.ls(selection = True):
        global ex_abc_grp
        ex_abc_grp = cmds.ls(selection = True)
        print ex_abc_grp
        for ck in ex_abc_grp:
            if ck in listA:
                print 'good to go'
            else:
                cmds.select(ck)
                cmds.delete()
        print cmds.confirmDialog(title = 'Sucessfully Done ' , message = 'Unneeded groups have been deleted' , cancelButton='Oky GSS' ) 
    else:
        print cmds.confirmDialog(title = ' Warning!!! ' , message = ' atleast select an charcter group to delete !!!' , cancelButton='Oky GSS' )
       


cmds.window( title="TajMahal Alembic Pipeline",bgc = (0.5,0.5,0.5) )

# Frame Layout for animators
cmds.frameLayout( label='For Animators',w = 580, h =250,  borderStyle='out', bgc = (.2,.25,.4) )

cmds.rowColumnLayout( numberOfRows=1,w = 10, h =20, cs = [(450, 40)]  )
cmds.button( label = 'Create Reference', command = 'refer_button()', w = 110, h = 30, bgc = (.4,.4,.4))
  
cmds.textField('strFrmBox', ann = ' enter startFrame  ', ec = 'input_frm()', pht = '1001',  bgc = (.8,.8,.8) )
cmds.textField('endFrmBox', ann = ' enter endFrame  ', ec = 'input_frm()', pht = '1090',bgc = (.8,.8,.8))
cmds.button( label = 'Export abc', command = 'abcExport()', w = 80, h = 30, bgc = (.2,.25,.4))
cmds.setParent( '..' )

#for Lighters

cmds.frameLayout( label='For Lighters',w = 420, h =20,  borderStyle='out', bgc = (0.1,0.3,0.3) )
cmds.rowColumnLayout( numberOfRows= 1,w = 200, h =30, cs = [(30, 30)] )
cmds.textField('BoxA', ann = ' enter ShotNumber  ', ec = 'input_frm()', pht = 'Rat A',  bgc = (.8,.8,.8) )  
cmds.textField('BoxB', ann = ' enter ShotNumber  ', ec = 'input_frm()', pht = 'Rat B',  bgc = (.8,.8,.8) )
cmds.textField('BoxC', ann = ' enter ShotNumber  ', ec = 'input_frm()', pht = 'Rat C',  bgc = (.8,.8,.8) )
cmds.textField('BoxD', ann = ' enter ShotNumber  ', ec = 'input_frm()', pht = 'Rat D',  bgc = (.8,.8,.8) )
cmds.setParent( '..' ) 
cmds.rowColumnLayout( numberOfRows=3,w = 200, h =40, cs = [(450, 40)]  )
cmds.button( label = 'Import Rats', command = 'import_Rats()', w = 80, h = 30,  bgc = (0.1,0.3,0.3) )
cmds.setParent( '..' ) 
cmds.rowColumnLayout( numberOfRows= 1,w = 200, h =60, cs = [(450, 80)] )
cmds.textField('shotFrmBox', ann = ' enter ShotNumber  ', ec = 'input_frm()', pht = '250',  bgc = (.8,.8,.8) )
cmds.button( label = 'Replace Abc', command = 'x = abcImport()', w = 80, h = 30, bgc = (0.1,0.3,0.3) )
cmds.button( label = 'Delete Grps', command = 'delete_grps()', w = 80, h = 30, bgc = (0.1,0.3,0.3) )
cmds.setParent( '..' )

cmds.showWindow()
